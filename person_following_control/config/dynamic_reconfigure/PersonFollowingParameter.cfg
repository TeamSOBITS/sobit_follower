#!/usr/bin/env python
# -*- coding: utf-8 -*-
#cfgファイルが入っているpackage名を記述
PACKAGE = "person_following_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#rqt_reconfigureで動的に変更したい変数を宣言していく

following_control = gen.add_group("following_control", state = True)
following_control.add("base_footprint_name", str_t, 0, "基準フレーム名", "base_footprint")
following_method_enum = gen.enum([ gen.const("virtual_spring_model_dynamic_window_approach", int_t, 0, "virtual_spring_model_dynamic_window_approach"),
                        gen.const("virtual_spring_model", int_t, 1, "virtual_spring_model"),
                        gen.const("dynamic_window_approach", int_t, 2, "dynamic_window_approach") ],
                        "追従手法")
following_control.add("following_method", int_t, 0, "追従手法", 0, 0, 2, edit_method=following_method_enum)
following_control.add("following_distance", double_t, 0, "追従位置の距離 : l_0 [m]", 0.7, 0.0, 10.0)
# following_control.add("hz", double_t, 0, "タイマーの更新頻度", 20.0, 0.001, 100.0)

virtual_spring_model = gen.add_group("virtual_spring_model", state = True)
virtual_spring_model.add("following_angle_deg", double_t, 0, "追従位置の角度 : theta_sh [rad]", 0.0, -180, 180)
virtual_spring_model.add("spring_constant_linear", double_t, 0, "ばね定数(並進成分) : k_1 [N/m]", 30.0, 0.0, 300.0)
virtual_spring_model.add("spring_constant_angular", double_t, 0, "ばね定数(回転成分) : k_2 [N・m/rad]", 0.01, 0.0, 300.0)
virtual_spring_model.add("weight_robot", double_t, 0, "ロボットの重量 : M [Kg]", 30.0, 0.0, 100.0)
virtual_spring_model.add("moment_inertia", double_t, 0, "慣性モーメント : I [Kg・m^2]", 15.0, 0.0, 100.0)
virtual_spring_model.add("viscous_friction_linear", double_t, 0, "粘性摩擦(並進成分) : k_3 [N・s/m]", 1.0, 0.0, 100.0)
virtual_spring_model.add("viscous_friction_angular", double_t, 0, "粘性摩擦(回転成分) : k_4 [N・s/rad]", 1.0, 0.0, 100.0)
virtual_spring_model.add("radius_robot", double_t, 0, "ロボット半径 : L [m]", 0.3, 0.0, 10.0)
virtual_spring_model.add("display_vsm_path", bool_t, 0, "最適経路を描画するか", True)
virtual_spring_model.add("display_vsm_target", bool_t, 0, "追従位置", False)

dynamic_window_approach = gen.add_group("dynamic_window_approach", state = True)
dynamic_window_approach.add("min_velocity", double_t, 0, "最小並進速度", 0.0, 0.0, 3.0)
dynamic_window_approach.add("max_velocity", double_t, 0, "最小並進速度", 1.2, 0.0, 3.0)
dynamic_window_approach.add("min_angle_velocity_deg", double_t, 0, "最小回転速度", -90, -180.0, 180.0)
dynamic_window_approach.add("max_angle_velocity_deg", double_t, 0, "最小回転速度", 90, -180.0, 180.0)

dynamic_window_approach.add("predict_step", int_t, 0, "予測ステップ数", 30, 1, 50)
dynamic_window_approach.add("sampling_time", double_t, 0, "1ステップあたりのサンプリングタイム", 0.1, 0.001, 1.0)
dynamic_window_approach.add("velocity_step", double_t, 0, "予測経路の並進速度刻み", 10.0, 1.0, 30.0)
dynamic_window_approach.add("angle_velocity_step", double_t, 0, "予測経路の回転速度刻み", 30.0, 1.0, 100.0)

dynamic_window_approach.add("weight_goal", double_t, 0, "goal(v,ω)の重み", 5.0, 0.0, 10.0)
dynamic_window_approach.add("weight_obstacle", double_t, 0, "obstacle(v,ω)の重み", 5.0, 0.0, 10.0)
dynamic_window_approach.add("weight_angle", double_t, 0, "heading(v,ω)の重み", 1.0, 0.0, 10.0)
dynamic_window_approach.add("weight_velocity", double_t, 0, "velocity(v,ω)の重み", 0.5, 0.0, 10.0)

dynamic_window_approach.add("weight_vsm_angular", double_t, 0, "angular(v,ω)の重み", 1.0, 0.0, 10.0)
dynamic_window_approach.add("weight_vsm_linear", double_t, 0, "linear(v,ω)の重み", 2.0, 0.0, 10.0)

dynamic_window_approach.add("obstacle_cost_radius", double_t, 0, "障害物コスト半径", 0.35, 0.0, 10.0)

dynamic_window_approach.add("display_optimal_path", bool_t, 0, "最適経路を描画するか", True)
dynamic_window_approach.add("display_all_path", bool_t, 0, "予測経路を描画するか", True)

#最終行では第2引数はパッケージ名、第3引数はこのファイル名から拡張子を除いた物に
exit(gen.generate(PACKAGE, "person_following_control", "PersonFollowingParameter"))
